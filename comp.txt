import React, { useState, useEffect, useRef } from 'react';
import { 
  ShoppingCart, 
  Store, 
  Users, 
  Package, 
  LogOut, 
  User, 
  Lock, 
  Plus, 
  Minus, 
  Printer, 
  FileText, 
  AlertTriangle, 
  CheckCircle, 
  TrendingUp, 
  TrendingDown,
  Bell,
  Menu,
  X,
  Home,
  BarChart3,
  Settings,
  Receipt,
  Search,
  Filter,
  Edit,
  Trash2,
  Eye,
  Download,
  Upload,
  RefreshCw,
  Zap,
  MessageSquare,
  CreditCard,
  QrCode,
  Scan,
  Camera,
  DollarSign,
  Calendar,
  Clock,
  Phone,
  Mail,
  MapPin,
  Star,
  Heart,
  ShoppingCartIcon,
  Tag,
  Percent,
  Gift,
  Award,
  TrendingUpIcon,
  TrendingDownIcon,
  AlertCircle,
  Check,
  ChevronLeft,
  ChevronRight,
  Save,
  Copy,
  Share2,
  MoreVertical,
  Wifi,
  Battery,
  Volume2,
  Bluetooth,
  WifiOff,
  BatteryCharging,
  VolumeX,
  BluetoothOff,
  Box,
  Truck,
  Database,
  Calculator,
  Clipboard,
  PrinterIcon,
  List,
  History,
  File,
  FileSpreadsheet,
  FileTextIcon,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  CalendarIcon,
  UserCircle,
  Building,
  Warehouse,
  Move,
  ShoppingCartCheck,
  Coins,
  PieChart,
  LineChart,
  BarChart,
  Activity,
  EyeOff,
  Moon,
  Sun
} from 'lucide-react';

const App = () => {
  // Estados globales
  const [currentUser, setCurrentUser] = useState(null);
  const [currentView, setCurrentView] = useState('login');
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [activeTab, setActiveTab] = useState('dashboard');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState('cash');
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showTicketDesigner, setShowTicketDesigner] = useState(false);
  const [showScanner, setShowScanner] = useState(false);
  const [showCashRegister, setShowCashRegister] = useState(false);
  const [showNotes, setShowNotes] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [adminPosMode, setAdminPosMode] = useState(false);

  // Estados para datos
  const [users, setUsers] = useState([
    { id: 1, username: 'admin', password: 'admin123', role: 'admin', store: null, name: 'Administrador Principal', email: 'admin@laestrella.com', phone: '555-0101' },
    { id: 2, username: 'cajera1', password: 'cajera123', role: 'cashier', store: 'tienda1', name: 'MarÃ­a LÃ³pez', email: 'maria@laestrella.com', phone: '555-0102' },
    { id: 3, username: 'cajera2', password: 'cajera123', role: 'cashier', store: 'tienda2', name: 'Carlos GarcÃ­a', email: 'carlos@laestrella.com', phone: '555-0103' },
  ]);

  const [stores] = useState([
    { id: 'tienda1', name: 'Tienda Central', location: 'Av. Principal 123', phone: '555-0101' },
    { id: 'tienda2', name: 'Tienda Norte', location: 'Calle Norte 456', phone: '555-0102' },
    { id: 'bodega', name: 'Bodega Central', location: 'Calle Industrial 789', phone: '555-0103' },
  ]);

  const [categories] = useState([
    { id: 1, name: 'Abarrotes', color: 'bg-blue-500', icon: 'ðŸ›’' },
    { id: 2, name: 'Vicio', color: 'bg-red-500', icon: 'ðŸš¬' },
    { id: 3, name: 'Bebidas', color: 'bg-green-500', icon: 'ðŸ¥¤' },
    { id: 4, name: 'Limpieza', color: 'bg-yellow-500', icon: 'ðŸ§¼' },
    { id: 5, name: 'Cuidado Personal', color: 'bg-purple-500', icon: 'ðŸ§´' },
  ]);

  const [products, setProducts] = useState([
    { id: 1, name: 'Arroz 1kg', price: 25.50, cost: 18.00, category: 'Abarrotes', categoryId: 1, image: 'https://placehold.co/60x60/4f46e5/white?text=AR', barcode: '123456789001' },
    { id: 2, name: 'Frijoles 1kg', price: 32.00, cost: 22.00, category: 'Abarrotes', categoryId: 1, image: 'https://placehold.co/60x60/059669/white?text=FR', barcode: '123456789002' },
    { id: 3, name: 'Aceite 1L', price: 45.90, cost: 32.00, category: 'Abarrotes', categoryId: 1, image: 'https://placehold.co/60x60/dc2626/white?text=AC', barcode: '123456789003' },
    { id: 4, name: 'Cerveza Modelo 355ml', price: 18.75, cost: 12.00, category: 'Vicio', categoryId: 2, image: 'https://placehold.co/60x60/ea580c/white?text=CM', barcode: '123456789004' },
    { id: 5, name: 'Cigarros Marlboro', price: 85.00, cost: 65.00, category: 'Vicio', categoryId: 2, image: 'https://placehold.co/60x60/6366f1/white?text=CI', barcode: '123456789005' },
    { id: 6, name: 'Red Bull 250ml', price: 35.50, cost: 25.00, category: 'Vicio', categoryId: 2, image: 'https://placehold.co/60x60/ec4899/white?text=RB', barcode: '123456789006' },
    { id: 7, name: 'Coca Cola 600ml', price: 15.00, cost: 10.00, category: 'Bebidas', categoryId: 3, image: 'https://placehold.co/60x60/06b6d4/white?text=CC', barcode: '123456789007' },
    { id: 8, name: 'JabÃ³n Dove 125g', price: 22.50, cost: 15.00, category: 'Cuidado Personal', categoryId: 5, image: 'https://placehold.co/60x60/8b5cf6/white?text=JD', barcode: '123456789008' },
  ]);

  const [inventory, setInventory] = useState({
    tienda1: [
      { productId: 1, stock: 50, minStock: 10 },
      { productId: 2, stock: 30, minStock: 5 },
      { productId: 3, stock: 25, minStock: 8 },
      { productId: 4, stock: 40, minStock: 15 },
      { productId: 5, stock: 20, minStock: 5 },
      { productId: 6, stock: 15, minStock: 3 },
      { productId: 7, stock: 35, minStock: 10 },
      { productId: 8, stock: 25, minStock: 8 },
    ],
    tienda2: [
      { productId: 1, stock: 45, minStock: 10 },
      { productId: 2, stock: 25, minStock: 5 },
      { productId: 3, stock: 20, minStock: 8 },
      { productId: 4, stock: 35, minStock: 15 },
      { productId: 5, stock: 18, minStock: 5 },
      { productId: 6, stock: 12, minStock: 3 },
      { productId: 7, stock: 30, minStock: 10 },
      { productId: 8, stock: 20, minStock: 8 },
    ],
    bodega: [
      { productId: 1, stock: 200, minStock: 50 },
      { productId: 2, stock: 150, minStock: 30 },
      { productId: 3, stock: 100, minStock: 25 },
      { productId: 4, stock: 180, minStock: 40 },
      { productId: 5, stock: 100, minStock: 20 },
      { productId: 6, stock: 80, minStock: 15 },
      { productId: 7, stock: 150, minStock: 30 },
      { productId: 8, stock: 100, minStock: 25 },
    ]
  });

  const [sales, setSales] = useState([
    { id: 1, store: 'tienda1', total: 125.50, items: 3, date: '2024-01-15', cashier: 'cajera1', products: [{id: 1, quantity: 2, price: 25.50}, {id: 4, quantity: 1, price: 18.75}] },
    { id: 2, store: 'tienda1', total: 89.75, items: 2, date: '2024-01-15', cashier: 'cajera1', products: [{id: 2, quantity: 1, price: 32.00}, {id: 5, quantity: 1, price: 85.00}] },
    { id: 3, store: 'tienda2', total: 203.20, items: 5, date: '2024-01-15', cashier: 'cajera2', products: [{id: 3, quantity: 2, price: 45.90}, {id: 6, quantity: 3, price: 35.50}] },
    { id: 4, store: 'tienda2', total: 67.90, items: 1, date: '2024-01-15', cashier: 'cajera2', products: [{id: 1, quantity: 1, price: 25.50}] },
  ]);

  const [suppliers] = useState([
    { id: 1, name: 'Distribuidora ABC', contact: '555-0123', email: 'abc@distribuidora.com', products: 15 },
    { id: 2, name: 'Proveedora XYZ', contact: '555-0456', email: 'xyz@proveedora.com', products: 22 },
    { id: 3, name: 'Mayorista 123', contact: '555-0789', email: '123@mayorista.com', products: 8 },
  ]);

  const [inventoryHistory, setInventoryHistory] = useState([
    { id: 1, productId: 1, store: 'tienda1', type: 'sale', quantity: -2, reason: 'Venta', date: '2024-01-15', user: 'cajera1' },
    { id: 2, productId: 4, store: 'tienda1', type: 'sale', quantity: -1, reason: 'Venta', date: '2024-01-15', user: 'cajera1' },
    { id: 3, productId: 2, store: 'tienda1', type: 'sale', quantity: -1, reason: 'Venta', date: '2024-01-15', user: 'cajera1' },
    { id: 4, productId: 5, store: 'tienda1', type: 'sale', quantity: -1, reason: 'Venta', date: '2024-01-15', user: 'cajera1' },
    { id: 5, productId: 3, store: 'tienda2', type: 'sale', quantity: -2, reason: 'Venta', date: '2024-01-15', user: 'cajera2' },
    { id: 6, productId: 6, store: 'tienda2', type: 'sale', quantity: -3, reason: 'Venta', date: '2024-01-15', user: 'cajera2' },
    { id: 7, productId: 1, store: 'bodega', type: 'transfer', quantity: -50, reason: 'Transferencia a tienda1', date: '2024-01-10', user: 'admin' },
    { id: 8, productId: 1, store: 'tienda1', type: 'transfer', quantity: 50, reason: 'RecepciÃ³n de bodega', date: '2024-01-10', user: 'admin' },
  ]);

  const [stockAdjustments, setStockAdjustments] = useState([
    { id: 1, productId: 1, store: 'tienda1', oldQuantity: 52, newQuantity: 50, reason: 'Rotura de producto', date: '2024-01-14', user: 'cajera1' },
    { id: 2, productId: 4, store: 'tienda2', oldQuantity: 38, newQuantity: 35, reason: 'ExtravÃ­o', date: '2024-01-13', user: 'cajera2' },
  ]);

  const [transferOrders, setTransferOrders] = useState([
    { id: 1, fromStore: 'bodega', toStore: 'tienda1', status: 'completed', date: '2024-01-10', items: [{productId: 1, quantity: 50}, {productId: 2, quantity: 30}] },
    { id: 2, fromStore: 'bodega', toStore: 'tienda2', status: 'completed', date: '2024-01-10', items: [{productId: 1, quantity: 45}, {productId: 2, quantity: 25}] },
    { id: 3, fromStore: 'bodega', toStore: 'tienda1', status: 'pending', date: '2024-01-16', items: [{productId: 3, quantity: 30}] },
  ]);

  const [purchaseOrders, setPurchaseOrders] = useState([
    { id: 1, supplierId: 1, store: 'bodega', status: 'completed', date: '2024-01-05', items: [{productId: 1, quantity: 250, cost: 18.00}, {productId: 2, quantity: 200, cost: 22.00}] },
    { id: 2, supplierId: 2, store: 'bodega', status: 'pending', date: '2024-01-15', items: [{productId: 3, quantity: 150, cost: 32.00}] },
  ]);

  // Estados para formularios
  const [showUserModal, setShowUserModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [showProductModal, setShowProductModal] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const [selectedInventory, setSelectedInventory] = useState('bodega');
  const [aiQuery, setAiQuery] = useState('');
  const [aiResponse, setAiResponse] = useState('');
  const [cart, setCart] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showTicket, setShowTicket] = useState(false);
  const [ticketDesign, setTicketDesign] = useState({
    logo: 'https://placehold.co/80x80/4f46e5/white?text=â˜…',
    header: 'La Estrella\nTienda de Abarrotes\nRFC: LEST900101XXX',
    footer: 'Â¡Gracias por su compra!\nVisÃ­tenos pronto',
    showLogo: true,
    showHeader: true,
    showFooter: true
  });
  const [cashRegister, setCashRegister] = useState({
    openingAmount: 1000.00,
    currentAmount: 1000.00,
    sales: 0,
    cashIn: 0,
    cashOut: 0,
    isOpen: true
  });

  // Estados para reportes
  const [inventoryReport, setInventoryReport] = useState({
    totalValue: 0,
    totalCost: 0,
    totalProfit: 0,
    items: []
  });

  // Estados para POS admin
  const [adminPosStore, setAdminPosStore] = useState('tienda1');

  // Referencias
  const scannerRef = useRef(null);
  const paymentInputRef = useRef(null);

  // Funciones de autenticaciÃ³n
  const handleLogin = (username, password) => {
    const user = users.find(u => u.username === username && u.password === password);
    if (user) {
      setCurrentUser(user);
      setCurrentView(user.role === 'admin' ? 'admin-dashboard' : 'pos');
    }
  };

  const handleLogout = () => {
    setCurrentUser(null);
    setCurrentView('login');
    setActiveTab('dashboard');
    setCart([]);
    setAdminPosMode(false);
  };

  // Funciones CRUD para Usuarios
  const handleCreateUser = (userData) => {
    const newUser = {
      id: Date.now(),
      ...userData
    };
    setUsers([...users, newUser]);
    setShowUserModal(false);
  };

  const handleUpdateUser = (userData) => {
    setUsers(users.map(user => 
      user.id === userData.id ? userData : user
    ));
    setShowUserModal(false);
    setEditingUser(null);
  };

  const handleDeleteUser = (userId) => {
    setUsers(users.filter(user => user.id !== userId));
  };

  // Funciones CRUD para Productos
  const handleCreateProduct = (productData) => {
    const newProduct = {
      id: Date.now(),
      ...productData
    };
    setProducts([...products, newProduct]);
    setShowProductModal(false);
  };

  const handleUpdateProduct = (productData) => {
    setProducts(products.map(product => 
      product.id === productData.id ? productData : product
    ));
    setShowProductModal(false);
    setEditingProduct(null);
  };

  const handleDeleteProduct = (productId) => {
    setProducts(products.filter(product => product.id !== productId));
  };

  // Funciones de inventario
  const updateStock = (storeId, productId, newStock) => {
    setInventory({
      ...inventory,
      [storeId]: inventory[storeId].map(item => 
        item.productId === productId 
          ? { ...item, stock: newStock }
          : item
      )
    });
  };

  // Funciones POS
  const addToCart = (product) => {
    const existingItem = cart.find(item => item.id === product.id);
    if (existingItem) {
      setCart(cart.map(item => 
        item.id === product.id 
          ? { ...item, quantity: item.quantity + 1 }
          : item
      ));
    } else {
      setCart([...cart, { ...product, quantity: 1 }]);
    }
  };

  const removeFromCart = (productId) => {
    setCart(cart.filter(item => item.id !== productId));
  };

  const updateQuantity = (productId, newQuantity) => {
    if (newQuantity <= 0) {
      removeFromCart(productId);
      return;
    }
    setCart(cart.map(item => 
      item.id === productId 
        ? { ...item, quantity: newQuantity }
        : item
    ));
  };

  const getSubtotal = () => {
    return cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  };

  const getTax = () => {
    return getSubtotal() * 0.16; // 16% IVA
  };

  const getTotalWithTax = () => {
    return getSubtotal() + getTax();
  };

  const filteredProducts = products.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.barcode.includes(searchTerm)
  );

  // Funciones AI simuladas
  const handleAIQuery = async () => {
    if (!aiQuery.trim()) return;
    
    // SimulaciÃ³n de respuesta AI
    const responses = [
      "Basado en el anÃ¡lisis de ventas recientes, recomiendo aumentar el stock de productos de la categorÃ­a 'Vicio' en un 20% para el prÃ³ximo mes.",
      "El producto mÃ¡s vendido en la Ãºltima semana fue Cigarros Marlboro con 45 unidades vendidas.",
      "Se detecta una tendencia de crecimiento del 15% en ventas de bebidas energÃ©ticas los fines de semana.",
      "Para optimizar inventario, sugiero reducir el stock de productos de limpieza en un 10% y aumentar productos de cuidado personal en un 25%.",
      "El margen de ganancia promedio por categorÃ­a es: Vicio (45%), Abarrotes (32%), Bebidas (28%)."
    ];
    
    setAiResponse(responses[Math.floor(Math.random() * responses.length)]);
  };

  // Funciones de pago
  const handlePayment = (method, amount) => {
    if (cart.length === 0) return;
    
    const total = getTotalWithTax();
    if (amount < total) {
      alert('El monto recibido es insuficiente');
      return;
    }
    
    // Actualizar caja registradora
    const newCashRegister = {
      ...cashRegister,
      currentAmount: cashRegister.currentAmount + total,
      sales: cashRegister.sales + total
    };
    setCashRegister(newCashRegister);
    
    // Crear nueva venta
    const newSale = {
      id: Date.now(),
      store: adminPosMode ? adminPosStore : currentUser.store,
      subtotal: getSubtotal(),
      tax: getTax(),
      total: total,
      items: cart.length,
      date: new Date().toISOString().split('T')[0],
      time: new Date().toLocaleTimeString(),
      cashier: adminPosMode ? 'admin' : currentUser.username,
      paymentMethod: method,
      products: cart.map(item => ({
        id: item.id,
        name: item.name,
        quantity: item.quantity,
        price: item.price,
        total: item.price * item.quantity
      }))
    };
    
    setSales([...sales, newSale]);
    setCart([]);
    setShowPaymentModal(false);
    setShowTicket(true);
  };

  // Funciones de caja
  const handleCashRegisterOperation = (type, amount) => {
    if (type === 'in') {
      setCashRegister({
        ...cashRegister,
        currentAmount: cashRegister.currentAmount + amount,
        cashIn: cashRegister.cashIn + amount
      });
    } else {
      setCashRegister({
        ...cashRegister,
        currentAmount: cashRegister.currentAmount - amount,
        cashOut: cashRegister.cashOut + amount
      });
    }
  };

  // Funciones de scanner
  const simulateScan = () => {
    const randomProduct = products[Math.floor(Math.random() * products.length)];
    addToCart(randomProduct);
  };

  // Funciones de reportes
  const generateInventoryReport = () => {
    const reportItems = [];
    let totalValue = 0;
    let totalCost = 0;
    
    Object.keys(inventory).forEach(storeId => {
      inventory[storeId].forEach(item => {
        const product = products.find(p => p.id === item.productId);
        if (product) {
          const value = product.price * item.stock;
          const cost = product.cost * item.stock;
          const profit = value - cost;
          
          reportItems.push({
            store: storeId,
            productName: product.name,
            stock: item.stock,
            price: product.price,
            cost: product.cost,
            value,
            costTotal: cost,
            profit
          });
          
          totalValue += value;
          totalCost += cost;
        }
      });
    });
    
    setInventoryReport({
      totalValue,
      totalCost,
      totalProfit: totalValue - totalCost,
      items: reportItems
    });
  };

  // Componentes
  const LoginScreen = () => {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');

    const handleSubmit = (e) => {
      e.preventDefault();
      handleLogin(username, password);
    };

    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gradient-to-br from-blue-50 to-indigo-100'} flex items-center justify-center p-4`}>
        <div className={`bg-white rounded-2xl shadow-xl p-8 w-full max-w-md ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className="text-center mb-8">
            <div className="mx-auto bg-indigo-600 rounded-full p-4 w-16 h-16 flex items-center justify-center mb-4">
              <Store className="w-8 h-8 text-white" />
            </div>
            <h1 className={`text-3xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>La Estrella</h1>
            <p className={`${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Sistema de Punto de Venta</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>
                Usuario
              </label>
              <div className="relative">
                <User className={`absolute left-3 top-3 w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} />
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  className={`w-full pl-10 pr-4 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                  placeholder="Ingresa tu usuario"
                  required
                />
              </div>
            </div>

            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>
                ContraseÃ±a
              </label>
              <div className="relative">
                <Lock className={`absolute left-3 top-3 w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} />
                <input
                  type="password"
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  className={`w-full pl-10 pr-4 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                  placeholder="Ingresa tu contraseÃ±a"
                  required
                />
              </div>
            </div>

            <button
              type="submit"
              className="w-full bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
            >
              Iniciar SesiÃ³n
            </button>
          </form>

          <div className={`mt-6 text-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <p>Usuarios de prueba:</p>
            <p>admin / admin123 (Administrador)</p>
            <p>cajera1 / cajera123 (Cajera Tienda 1)</p>
            <p>cajera2 / cajera123 (Cajera Tienda 2)</p>
          </div>
        </div>
      </div>
    );
  };

  const UserModal = () => {
    const [formData, setFormData] = useState({
      username: '',
      password: '',
      name: '',
      email: '',
      phone: '',
      role: 'cashier',
      store: 'tienda1'
    });

    useEffect(() => {
      if (editingUser) {
        setFormData(editingUser);
      } else {
        setFormData({
          username: '',
          password: '',
          name: '',
          email: '',
          phone: '',
          role: 'cashier',
          store: 'tienda1'
        });
      }
    }, [editingUser]);

    const handleSubmit = (e) => {
      e.preventDefault();
      if (editingUser) {
        handleUpdateUser({ ...formData, id: editingUser.id });
      } else {
        handleCreateUser(formData);
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                {editingUser ? 'Editar Usuario' : 'Crear Usuario'}
              </h2>
              <button
                onClick={() => {
                  setShowUserModal(false);
                  setEditingUser(null);
                }}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <form onSubmit={handleSubmit} className="p-6 space-y-4">
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Nombre Completo</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Email</label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => setFormData({...formData, email: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>TelÃ©fono</label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => setFormData({...formData, phone: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Nombre de Usuario</label>
              <input
                type="text"
                value={formData.username}
                onChange={(e) => setFormData({...formData, username: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>ContraseÃ±a</label>
              <input
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({...formData, password: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Rol</label>
              <select
                value={formData.role}
                onChange={(e) => setFormData({...formData, role: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              >
                <option value="cashier">Cajero</option>
                <option value="admin">Administrador</option>
              </select>
            </div>
            
            {formData.role === 'cashier' && (
              <div>
                <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Tienda Asignada</label>
                <select
                  value={formData.store}
                  onChange={(e) => setFormData({...formData, store: e.target.value})}
                  className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                >
                  <option value="tienda1">Tienda Central</option>
                  <option value="tienda2">Tienda Norte</option>
                </select>
              </div>
            )}
            
            <div className="flex space-x-3 pt-4">
              <button
                type="submit"
                className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                {editingUser ? 'Actualizar' : 'Crear'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowUserModal(false);
                  setEditingUser(null);
                }}
                className={`px-6 py-2 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cancelar
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const ProductModal = () => {
    const [formData, setFormData] = useState({
      name: '',
      price: '',
      cost: '',
      category: 'Abarrotes',
      categoryId: 1,
      barcode: '',
      image: 'https://placehold.co/60x60/4f46e5/white?text=PR'
    });

    useEffect(() => {
      if (editingProduct) {
        setFormData(editingProduct);
      } else {
        setFormData({
          name: '',
          price: '',
          cost: '',
          category: 'Abarrotes',
          categoryId: 1,
          barcode: '',
          image: 'https://placehold.co/60x60/4f46e5/white?text=PR'
        });
      }
    }, [editingProduct]);

    const handleSubmit = (e) => {
      e.preventDefault();
      const productData = {
        ...formData,
        price: parseFloat(formData.price),
        cost: parseFloat(formData.cost),
        categoryId: categories.find(c => c.name === formData.category)?.id || 1
      };
      
      if (editingProduct) {
        handleUpdateProduct({ ...productData, id: editingProduct.id });
      } else {
        handleCreateProduct(productData);
      }
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
                {editingProduct ? 'Editar Producto' : 'Crear Producto'}
              </h2>
              <button
                onClick={() => {
                  setShowProductModal(false);
                  setEditingProduct(null);
                }}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <form onSubmit={handleSubmit} className="p-6 space-y-4">
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Nombre del Producto</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({...formData, name: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Precio de Venta</label>
              <input
                type="number"
                step="0.01"
                value={formData.price}
                onChange={(e) => setFormData({...formData, price: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>Costo</label>
              <input
                type="number"
                step="0.01"
                value={formData.cost}
                onChange={(e) => setFormData({...formData, cost: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                required
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>CategorÃ­a</label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({...formData, category: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              >
                {categories.map(category => (
                  <option key={category.id} value={category.name}>{category.name}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>CÃ³digo de Barras</label>
              <input
                type="text"
                value={formData.barcode}
                onChange={(e) => setFormData({...formData, barcode: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              />
            </div>
            
            <div>
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>URL de Imagen</label>
              <input
                type="text"
                value={formData.image}
                onChange={(e) => setFormData({...formData, image: e.target.value})}
                className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              />
            </div>
            
            <div className="flex space-x-3 pt-4">
              <button
                type="submit"
                className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                {editingProduct ? 'Actualizar' : 'Crear'}
              </button>
              <button
                type="button"
                onClick={() => {
                  setShowProductModal(false);
                  setEditingProduct(null);
                }}
                className={`px-6 py-2 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cancelar
              </button>
            </div>
          </form>
        </div>
      </div>
    );
  };

  const AdminDashboard = () => {
    const store1Sales = sales.filter(s => s.store === 'tienda1');
    const store2Sales = sales.filter(s => s.store === 'tienda2');
    
    const totalSales = sales.reduce((sum, sale) => sum + sale.total, 0);
    const store1Total = store1Sales.reduce((sum, sale) => sum + sale.total, 0);
    const store2Total = store2Sales.reduce((sum, sale) => sum + sale.total, 0);

    const getStockStatus = (stock, minStock) => {
      if (stock <= minStock) return 'critical';
      if (stock <= minStock * 1.5) return 'warning';
      return 'normal';
    };

    const getStockColor = (status) => {
      switch (status) {
        case 'critical': return 'text-red-600 bg-red-50';
        case 'warning': return 'text-yellow-600 bg-yellow-50';
        default: return 'text-green-600 bg-green-50';
      }
    };

    const renderDashboard = () => (
      <div className="space-y-8">
        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Ventas Totales</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${totalSales.toFixed(2)}</p>
              </div>
              <div className="p-3 bg-green-100 rounded-full">
                <TrendingUp className="w-6 h-6 text-green-600" />
              </div>
            </div>
          </div>

          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Tienda Central</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${store1Total.toFixed(2)}</p>
              </div>
              <div className="p-3 bg-blue-100 rounded-full">
                <Store className="w-6 h-6 text-blue-600" />
              </div>
            </div>
          </div>

          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Tienda Norte</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${store2Total.toFixed(2)}</p>
              </div>
              <div className="p-3 bg-purple-100 rounded-full">
                <Store className="w-6 h-6 text-purple-600" />
              </div>
            </div>
          </div>

          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <div className="flex items-center justify-between">
              <div>
                <p className={`text-sm font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Productos Bajo Stock</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>12</p>
              </div>
              <div className="p-3 bg-red-100 rounded-full">
                <AlertTriangle className="w-6 h-6 text-red-600" />
              </div>
            </div>
          </div>
        </div>

        {/* Inventory Alerts */}
        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-6`}>Alertas de Inventario</h2>
          <div className="space-y-4">
            {inventory.bodega.map(item => {
              const product = products.find(p => p.id === item.productId);
              const status = getStockStatus(item.stock, item.minStock);
              if (status !== 'normal') {
                return (
                  <div key={item.productId} className={`flex items-center justify-between p-4 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                    <div className="flex items-center space-x-4">
                      <img src={product.image} alt={product.name} className="w-12 h-12 rounded-lg" />
                      <div>
                        <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>{product.name}</h3>
                        <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Bodega: {item.stock} unidades</p>
                      </div>
                    </div>
                    <div className={`px-3 py-1 rounded-full text-sm font-medium ${getStockColor(status)}`}>
                      {status === 'critical' ? 'Stock CrÃ­tico' : 'Stock Bajo'}
                    </div>
                  </div>
                );
              }
              return null;
            })}
          </div>
        </div>

        {/* Recent Sales */}
        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-6`}>Ventas Recientes</h2>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>ID</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Tienda</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Cajera</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Fecha</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Total</th>
                </tr>
              </thead>
              <tbody>
                {sales.slice(0, 5).map(sale => (
                  <tr key={sale.id} className={`border-b hover:bg-gray-50 ${darkMode ? 'border-gray-700 hover:bg-gray-700' : ''}`}>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>#{sale.id}</td>
                    <td className="py-3 px-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 ${darkMode ? 'bg-blue-900 text-blue-200' : ''}`}>
                        {stores.find(s => s.id === sale.store)?.name}
                      </span>
                    </td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{sale.cashier}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{sale.date}</td>
                    <td className={`py-3 px-4 font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${sale.total.toFixed(2)}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );

    const renderUsers = () => (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>GestiÃ³n de Usuarios</h2>
          <button
            onClick={() => {
              setEditingUser(null);
              setShowUserModal(true);
            }}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2"
          >
            <Plus className="w-4 h-4" />
            <span>Agregar Usuario</span>
          </button>
        </div>

        <div className={`bg-white rounded-xl shadow-sm overflow-hidden ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className={darkMode ? 'bg-gray-700' : 'bg-gray-50'}>
                <tr>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Nombre</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Usuario</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Email</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Rol</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tienda</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Acciones</th>
                </tr>
              </thead>
              <tbody>
                {users.map(user => (
                  <tr key={user.id} className={`border-b hover:bg-gray-50 ${darkMode ? 'border-gray-700 hover:bg-gray-700' : ''}`}>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{user.name}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{user.username}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{user.email}</td>
                    <td className="py-3 px-4">
                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                        user.role === 'admin' 
                          ? 'bg-purple-100 text-purple-800' 
                          : 'bg-green-100 text-green-800'
                      } ${darkMode ? (
                        user.role === 'admin' ? 'bg-purple-900 text-purple-200' : 'bg-green-900 text-green-200'
                      ) : ''}`}>
                        {user.role === 'admin' ? 'Administrador' : 'Cajero'}
                      </span>
                    </td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>
                      {user.store 
                        ? stores.find(s => s.id === user.store)?.name 
                        : 'Todas las tiendas'
                      }
                    </td>
                    <td className="py-3 px-4">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => {
                            setEditingUser(user);
                            setShowUserModal(true);
                          }}
                          className={`p-2 ${darkMode ? 'text-blue-400 hover:bg-gray-600' : 'text-blue-600 hover:bg-blue-50'} rounded-full`}
                        >
                          <Edit className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteUser(user.id)}
                          className={`p-2 ${darkMode ? 'text-red-400 hover:bg-gray-600' : 'text-red-600 hover:bg-red-50'} rounded-full`}
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );

    const renderInventory = () => (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>GestiÃ³n de Inventario</h2>
          <div className="flex space-x-4">
            <select
              value={selectedInventory}
              onChange={(e) => setSelectedInventory(e.target.value)}
              className={`border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
            >
              <option value="bodega">Bodega</option>
              <option value="tienda1">Tienda Central</option>
              <option value="tienda2">Tienda Norte</option>
            </select>
            <button
              onClick={() => {
                setEditingProduct(null);
                setShowProductModal(true);
              }}
              className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2"
            >
              <Plus className="w-4 h-4" />
              <span>Agregar Producto</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
          {products.map(product => {
            const inventoryItem = inventory[selectedInventory].find(item => item.productId === product.id);
            const stock = inventoryItem ? inventoryItem.stock : 0;
            const minStock = inventoryItem ? inventoryItem.minStock : 0;
            const status = getStockStatus(stock, minStock);
            
            return (
              <div key={product.id} className={`bg-white rounded-xl shadow-sm border hover:shadow-md transition-shadow ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
                <div className="p-4">
                  <div className="flex justify-between items-start mb-3">
                    <img
                      src={product.image}
                      alt={product.name}
                      className="w-16 h-16 rounded-lg object-cover"
                    />
                    <div className="flex space-x-1">
                      <button
                        onClick={() => {
                          setEditingProduct(product);
                          setShowProductModal(true);
                        }}
                        className={`p-1 ${darkMode ? 'text-blue-400 hover:bg-gray-700' : 'text-blue-600 hover:bg-blue-50'} rounded`}
                      >
                        <Edit className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDeleteProduct(product.id)}
                        className={`p-1 ${darkMode ? 'text-red-400 hover:bg-gray-700' : 'text-red-600 hover:bg-red-50'} rounded`}
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                  
                  <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} text-sm mb-1`}>{product.name}</h3>
                  <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-2`}>{product.category}</p>
                  
                  <div className="flex items-center justify-between mb-2">
                    <span className="font-bold text-indigo-600">${product.price.toFixed(2)}</span>
                    <span className={`text-xs px-2 py-1 rounded-full ${
                      status === 'critical' ? 'bg-red-100 text-red-800' :
                      status === 'warning' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-green-100 text-green-800'
                    } ${darkMode ? (
                      status === 'critical' ? 'bg-red-900 text-red-200' :
                      status === 'warning' ? 'bg-yellow-900 text-yellow-200' :
                      'bg-green-900 text-green-200'
                    ) : ''}`}>
                      {stock}
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <input
                      type="number"
                      value={stock}
                      onChange={(e) => updateStock(selectedInventory, product.id, parseInt(e.target.value) || 0)}
                      className={`flex-1 px-2 py-1 text-sm border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                    />
                    <button
                      onClick={() => {
                        const newStock = stock + 10;
                        updateStock(selectedInventory, product.id, newStock);
                      }}
                      className={`p-1 ${darkMode ? 'bg-gray-700 text-gray-300 hover:bg-gray-600' : 'bg-indigo-100 text-indigo-600 hover:bg-indigo-200'} rounded hover:bg-indigo-200`}
                    >
                      <Plus className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    );

    const renderReports = () => (
      <div className="space-y-6">
        <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Reportes e Inteligencia Artificial</h2>
        
        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className="flex items-center space-x-3 mb-6">
            <Zap className="w-6 h-6 text-indigo-600" />
            <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Asistente AI de La Estrella</h3>
          </div>
          
          <div className="space-y-4">
            <div className="flex space-x-3">
              <input
                type="text"
                value={aiQuery}
                onChange={(e) => setAiQuery(e.target.value)}
                placeholder="Pregunta sobre ventas, inventario, tendencias..."
                className={`flex-1 px-4 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                onKeyPress={(e) => e.key === 'Enter' && handleAIQuery()}
              />
              <button
                onClick={handleAIQuery}
                className="bg-indigo-600 text-white px-6 py-3 rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2"
              >
                <MessageSquare className="w-4 h-4" />
                <span>Consultar</span>
              </button>
            </div>
            
            {aiResponse && (
              <div className={`bg-blue-50 border border-blue-200 rounded-lg p-4 ${darkMode ? 'bg-blue-900 border-blue-700' : ''}`}>
                <div className="flex items-start space-x-3">
                  <Zap className="w-5 h-5 text-blue-600 mt-0.5" />
                  <div>
                    <p className={`text-blue-800 ${darkMode ? 'text-blue-200' : ''}`}>{aiResponse}</p>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Ventas por CategorÃ­a</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Vicio</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>$2,450.00</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Abarrotes</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>$1,890.50</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Bebidas</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>$1,230.75</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Limpieza</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>$890.25</span>
              </div>
            </div>
          </div>

          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Top 5 Productos MÃ¡s Vendidos</h3>
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Cigarros Marlboro</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>125 unidades</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Cerveza Modelo</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>98 unidades</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Arroz 1kg</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>87 unidades</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Red Bull</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>76 unidades</span>
              </div>
              <div className="flex justify-between items-center">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Aceite 1L</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>65 unidades</span>
              </div>
            </div>
          </div>
        </div>

        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Descargar Reportes</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <button className={`flex items-center justify-center space-x-2 p-4 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}>
              <Download className="w-5 h-5" />
              <span>Reporte de Ventas</span>
            </button>
            <button className={`flex items-center justify-center space-x-2 p-4 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}>
              <Download className="w-5 h-5" />
              <span>Reporte de Inventario</span>
            </button>
            <button className={`flex items-center justify-center space-x-2 p-4 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}>
              <Download className="w-5 h-5" />
              <span>Reporte de Proveedores</span>
            </button>
          </div>
        </div>
      </div>
    );

    const renderInventoryReports = () => (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Reportes de Inventario</h2>
          <button
            onClick={generateInventoryReport}
            className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors flex items-center space-x-2"
          >
            <RefreshCw className="w-4 h-4" />
            <span>Generar Reporte</span>
          </button>
        </div>

        {inventoryReport.totalValue > 0 && (
          <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
            <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Resumen de ValoraciÃ³n de Inventario</h3>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-blue-50'}`}>
                <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Valor Total</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${inventoryReport.totalValue.toFixed(2)}</p>
              </div>
              <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-green-50'}`}>
                <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Costo Total</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${inventoryReport.totalCost.toFixed(2)}</p>
              </div>
              <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-purple-50'}`}>
                <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Ganancia Potencial</p>
                <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>${inventoryReport.totalProfit.toFixed(2)}</p>
              </div>
            </div>

            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tienda</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Producto</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Stock</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Precio</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Costo</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Valor</th>
                    <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Ganancia</th>
                  </tr>
                </thead>
                <tbody>
                  {inventoryReport.items.map((item, index) => (
                    <tr key={index} className={`border-b ${darkMode ? 'border-gray-700' : ''} hover:bg-gray-50 ${darkMode ? 'hover:bg-gray-700' : ''}`}>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.store}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.productName}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.stock}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>${item.price.toFixed(2)}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>${item.cost.toFixed(2)}</td>
                      <td className={`py-3 px-4 font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${item.value.toFixed(2)}</td>
                      <td className={`py-3 px-4 font-medium ${item.profit >= 0 ? 'text-green-600' : 'text-red-600'}`}>${item.profit.toFixed(2)}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}

        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Historial de Inventario</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Fecha</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tienda</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Producto</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tipo</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Cantidad</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>RazÃ³n</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Usuario</th>
                </tr>
              </thead>
              <tbody>
                {inventoryHistory.map(item => {
                  const product = products.find(p => p.id === item.productId);
                  return (
                    <tr key={item.id} className={`border-b ${darkMode ? 'border-gray-700' : ''} hover:bg-gray-50 ${darkMode ? 'hover:bg-gray-700' : ''}`}>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.date}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.store}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{product?.name || 'N/A'}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          item.type === 'sale' ? 'bg-red-100 text-red-800' :
                          item.type === 'transfer' ? 'bg-blue-100 text-blue-800' :
                          'bg-green-100 text-green-800'
                        } ${darkMode ? (
                          item.type === 'sale' ? 'bg-red-900 text-red-200' :
                          item.type === 'transfer' ? 'bg-blue-900 text-blue-200' :
                          'bg-green-900 text-green-200'
                        ) : ''}`}>
                          {item.type === 'sale' ? 'Venta' : item.type === 'transfer' ? 'Transferencia' : 'Ajuste'}
                        </span>
                      </td>
                      <td className={`py-3 px-4 ${item.quantity < 0 ? 'text-red-600' : 'text-green-600'}`}>{item.quantity}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.reason}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.user}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Ajustes de Stock</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Fecha</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tienda</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Producto</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Antes</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>DespuÃ©s</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>RazÃ³n</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Usuario</th>
                </tr>
              </thead>
              <tbody>
                {stockAdjustments.map(item => {
                  const product = products.find(p => p.id === item.productId);
                  return (
                    <tr key={item.id} className={`border-b ${darkMode ? 'border-gray-700' : ''} hover:bg-gray-50 ${darkMode ? 'hover:bg-gray-700' : ''}`}>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.date}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.store}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{product?.name || 'N/A'}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.oldQuantity}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.newQuantity}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.reason}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{item.user}</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>

        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Ã“rdenes de Transferencia</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>ID</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Desde</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Hacia</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Fecha</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Estado</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>ArtÃ­culos</th>
                </tr>
              </thead>
              <tbody>
                {transferOrders.map(order => (
                  <tr key={order.id} className={`border-b ${darkMode ? 'border-gray-700' : ''} hover:bg-gray-50 ${darkMode ? 'hover:bg-gray-700' : ''}`}>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>#{order.id}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.fromStore}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.toStore}</td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.date}</td>
                    <td className="py-3 px-4">
                      <span className={`px-2 py-1 rounded-full text-xs ${
                        order.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                      } ${darkMode ? (
                        order.status === 'completed' ? 'bg-green-900 text-green-200' : 'bg-yellow-900 text-yellow-200'
                      ) : ''}`}>
                        {order.status === 'completed' ? 'Completado' : 'Pendiente'}
                      </span>
                    </td>
                    <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.items.length} artÃ­culos</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>

        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Ã“rdenes de Compra</h3>
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className={`border-b ${darkMode ? 'border-gray-700' : ''}`}>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>ID</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Proveedor</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Tienda</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Fecha</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Estado</th>
                  <th className={`text-left py-3 px-4 font-medium ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>ArtÃ­culos</th>
                </tr>
              </thead>
              <tbody>
                {purchaseOrders.map(order => {
                  const supplier = suppliers.find(s => s.id === order.supplierId);
                  return (
                    <tr key={order.id} className={`border-b ${darkMode ? 'border-gray-700' : ''} hover:bg-gray-50 ${darkMode ? 'hover:bg-gray-700' : ''}`}>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>#{order.id}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{supplier?.name || 'N/A'}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.store}</td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.date}</td>
                      <td className="py-3 px-4">
                        <span className={`px-2 py-1 rounded-full text-xs ${
                          order.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                        } ${darkMode ? (
                          order.status === 'completed' ? 'bg-green-900 text-green-200' : 'bg-yellow-900 text-yellow-200'
                        ) : ''}`}>
                          {order.status === 'completed' ? 'Completado' : 'Pendiente'}
                        </span>
                      </td>
                      <td className={`py-3 px-4 ${darkMode ? 'text-gray-300' : ''}`}>{order.items.length} artÃ­culos</td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    );

    const renderAdminPos = () => (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Punto de Venta - Administrador</h2>
          <div className="flex space-x-4">
            <select
              value={adminPosStore}
              onChange={(e) => setAdminPosStore(e.target.value)}
              className={`border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg px-3 py-2 focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
            >
              <option value="tienda1">Tienda Central</option>
              <option value="tienda2">Tienda Norte</option>
            </select>
            <button
              onClick={() => setAdminPosMode(true)}
              className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
            >
              Abrir POS
            </button>
          </div>
        </div>
        
        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>InformaciÃ³n de la Tienda</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-blue-50'}`}>
              <Store className="w-8 h-8 text-blue-600 mb-2" />
              <h4 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Tienda Central</h4>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Av. Principal 123</p>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>555-0101</p>
            </div>
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-purple-50'}`}>
              <Store className="w-8 h-8 text-purple-600 mb-2" />
              <h4 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Tienda Norte</h4>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Calle Norte 456</p>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>555-0102</p>
            </div>
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-green-50'}`}>
              <Warehouse className="w-8 h-8 text-green-600 mb-2" />
              <h4 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Bodega Central</h4>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Calle Industrial 789</p>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>555-0103</p>
            </div>
          </div>
        </div>
        
        <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>EstadÃ­sticas RÃ¡pidas</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-indigo-50'}`}>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Ventas Hoy</p>
              <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>$1,234.56</p>
            </div>
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-green-50'}`}>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Productos Vendidos</p>
              <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>87</p>
            </div>
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-yellow-50'}`}>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Transacciones</p>
              <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>12</p>
            </div>
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-red-50'}`}>
              <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Productos Bajo Stock</p>
              <p className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}>5</p>
            </div>
          </div>
        </div>
      </div>
    );

    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        {/* Header */}
        <header className={`bg-white shadow-sm border-b ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
          <div className="px-6 py-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => setSidebarOpen(!sidebarOpen)}
                  className={`lg:hidden p-2 rounded-md ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'}`}
                >
                  <Menu className="w-6 h-6" />
                </button>
                <h1 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Panel Administrativo</h1>
              </div>
              <div className="flex items-center space-x-4">
                <button 
                  onClick={() => setDarkMode(!darkMode)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                >
                  {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                </button>
                <button className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}>
                  <Bell className="w-5 h-5" />
                </button>
                <div className="flex items-center space-x-3">
                  <div className="w-8 h-8 bg-indigo-600 rounded-full flex items-center justify-center">
                    <User className="w-5 h-5 text-white" />
                  </div>
                  <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-700'}`}>Administrador</span>
                  <button
                    onClick={handleLogout}
                    className="flex items-center space-x-1 text-red-600 hover:text-red-700"
                  >
                    <LogOut className="w-4 h-4" />
                    <span>Salir</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </header>

        <div className="flex">
          {/* Sidebar */}
          <aside className={`${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} lg:translate-x-0 fixed lg:static inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transition-transform duration-300 ease-in-out ${darkMode ? 'bg-gray-800' : ''}`}>
            <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
              <div className="flex items-center space-x-3">
                <Store className="w-8 h-8 text-indigo-600" />
                <span className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>La Estrella</span>
              </div>
            </div>
            <nav className="p-4 space-y-2">
              <button
                onClick={() => setActiveTab('dashboard')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'dashboard' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'dashboard' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <Home className="w-5 h-5" />
                <span>Dashboard</span>
              </button>
              <button
                onClick={() => setActiveTab('users')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'users' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'users' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <Users className="w-5 h-5" />
                <span>Usuarios</span>
              </button>
              <button
                onClick={() => setActiveTab('inventory')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'inventory' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'inventory' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <Package className="w-5 h-5" />
                <span>Inventario</span>
              </button>
              <button
                onClick={() => setActiveTab('inventory-reports')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'inventory-reports' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'inventory-reports' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <FileTextIcon className="w-5 h-5" />
                <span>Reportes de Inventario</span>
              </button>
              <button
                onClick={() => setActiveTab('reports')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'reports' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'reports' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <BarChart3 className="w-5 h-5" />
                <span>Reportes</span>
              </button>
              <button
                onClick={() => setActiveTab('admin-pos')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'admin-pos' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'admin-pos' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <ShoppingCart className="w-5 h-5" />
                <span>POS Administrador</span>
              </button>
              <button
                onClick={() => setActiveTab('settings')}
                className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors ${
                  activeTab === 'settings' 
                    ? 'bg-indigo-50 text-indigo-700' 
                    : `${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-50'}`
                } ${darkMode && activeTab === 'settings' ? 'bg-indigo-900 text-indigo-200' : ''}`}
              >
                <Settings className="w-5 h-5" />
                <span>ConfiguraciÃ³n</span>
              </button>
            </nav>
          </aside>

          {/* Main Content */}
          <main className="flex-1 lg:ml-0 p-6">
            {activeTab === 'dashboard' && renderDashboard()}
            {activeTab === 'users' && renderUsers()}
            {activeTab === 'inventory' && renderInventory()}
            {activeTab === 'inventory-reports' && renderInventoryReports()}
            {activeTab === 'reports' && renderReports()}
            {activeTab === 'admin-pos' && renderAdminPos()}
            {activeTab === 'settings' && (
              <div className={`bg-white rounded-xl shadow-sm p-6 ${darkMode ? 'bg-gray-800' : ''}`}>
                <h2 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-6`}>ConfiguraciÃ³n</h2>
                <div className="space-y-4">
                  <div className={`flex items-center justify-between p-4 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                    <div>
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Notificaciones</h3>
                      <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Recibir alertas de inventario bajo</p>
                    </div>
                    <button className="relative inline-flex h-6 w-11 items-center rounded-full bg-indigo-600">
                      <span className="inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-6" />
                    </button>
                  </div>
                  <div className={`flex items-center justify-between p-4 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                    <div>
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Reportes AutomÃ¡ticos</h3>
                      <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Generar reportes diarios</p>
                    </div>
                    <button className="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200">
                      <span className="inline-block h-4 w-4 transform rounded-full bg-white transition translate-x-1" />
                    </button>
                  </div>
                  <div className={`flex items-center justify-between p-4 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                    <div>
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>Tema Oscuro</h3>
                      <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Cambiar al tema oscuro</p>
                    </div>
                    <button 
                      onClick={() => setDarkMode(!darkMode)}
                      className="relative inline-flex h-6 w-11 items-center rounded-full bg-gray-200"
                    >
                      <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition ${darkMode ? 'translate-x-6' : 'translate-x-1'}`} />
                    </button>
                  </div>
                </div>
              </div>
            )}
          </main>
        </div>
      </div>
    );
  };

  const TicketDesigner = () => {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-4xl w-full max-h-screen overflow-y-auto ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>DiseÃ±ador de Ticket</h2>
              <button
                onClick={() => setShowTicketDesigner(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
              {/* ConfiguraciÃ³n del Ticket */}
              <div className="space-y-6">
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>Logo URL</label>
                  <input
                    type="text"
                    value={ticketDesign.logo}
                    onChange={(e) => setTicketDesign({...ticketDesign, logo: e.target.value})}
                    className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                  />
                </div>
                
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>Encabezado</label>
                  <textarea
                    value={ticketDesign.header}
                    onChange={(e) => setTicketDesign({...ticketDesign, header: e.target.value})}
                    rows={4}
                    className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                  />
                </div>
                
                <div>
                  <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>Pie de PÃ¡gina</label>
                  <textarea
                    value={ticketDesign.footer}
                    onChange={(e) => setTicketDesign({...ticketDesign, footer: e.target.value})}
                    rows={3}
                    className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                  />
                </div>
                
                <div className="space-y-3">
                  <label className={`flex items-center space-x-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                    <input
                      type="checkbox"
                      checked={ticketDesign.showLogo}
                      onChange={(e) => setTicketDesign({...ticketDesign, showLogo: e.target.checked})}
                      className="rounded"
                    />
                    <span>Mostrar Logo</span>
                  </label>
                  
                  <label className={`flex items-center space-x-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                    <input
                      type="checkbox"
                      checked={ticketDesign.showHeader}
                      onChange={(e) => setTicketDesign({...ticketDesign, showHeader: e.target.checked})}
                      className="rounded"
                    />
                    <span>Mostrar Encabezado</span>
                  </label>
                  
                  <label className={`flex items-center space-x-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                    <input
                      type="checkbox"
                      checked={ticketDesign.showFooter}
                      onChange={(e) => setTicketDesign({...ticketDesign, showFooter: e.target.checked})}
                      className="rounded"
                    />
                    <span>Mostrar Pie de PÃ¡gina</span>
                  </label>
                </div>
                
                <div className="flex space-x-3">
                  <button
                    onClick={() => setShowTicketDesigner(false)}
                    className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
                  >
                    Guardar DiseÃ±o
                  </button>
                  <button
                    onClick={() => setShowTicketDesigner(false)}
                    className={`px-6 py-2 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
                  >
                    Cancelar
                  </button>
                </div>
              </div>
              
              {/* Vista previa del Ticket */}
              <div className={`bg-gray-50 p-6 rounded-lg ${darkMode ? 'bg-gray-700' : ''}`}>
                <h3 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>Vista Previa</h3>
                <div className={`bg-white p-6 rounded-lg shadow-sm max-w-xs mx-auto ${darkMode ? 'bg-gray-800' : ''}`}>
                  {ticketDesign.showLogo && (
                    <div className="text-center mb-4">
                      <img src={ticketDesign.logo} alt="Logo" className="w-16 h-16 mx-auto" />
                    </div>
                  )}
                  
                  {ticketDesign.showHeader && (
                    <div className="text-center mb-4 text-xs">
                      {ticketDesign.header.split('\n').map((line, i) => (
                        <div key={i} className={darkMode ? 'text-gray-300' : 'text-gray-600'}>{line}</div>
                      ))}
                    </div>
                  )}
                  
                  <div className={`border-t border-b py-2 mb-4 ${darkMode ? 'border-gray-700' : ''}`}>
                    <div className={`text-xs mb-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Folio: #T001234</div>
                    <div className={`text-xs mb-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Fecha: {new Date().toLocaleDateString()}</div>
                    <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Hora: {new Date().toLocaleTimeString()}</div>
                  </div>
                  
                  <div className={`mb-4 text-xs ${darkMode ? 'text-gray-300' : ''}`}>
                    <div className="flex justify-between mb-1">
                      <span>Arroz 1kg x2</span>
                      <span>$51.00</span>
                    </div>
                    <div className="flex justify-between mb-1">
                      <span>Cerveza Modelo x1</span>
                      <span>$18.75</span>
                    </div>
                  </div>
                  
                  <div className={`border-t pt-2 ${darkMode ? 'border-gray-700' : ''}`}>
                    <div className="flex justify-between text-xs mb-1">
                      <span>Subtotal:</span>
                      <span>$69.75</span>
                    </div>
                    <div className="flex justify-between text-xs mb-1">
                      <span>IVA (16%):</span>
                      <span>$11.16</span>
                    </div>
                    <div className="flex justify-between font-bold text-sm mt-2">
                      <span>Total:</span>
                      <span>$80.91</span>
                    </div>
                  </div>
                  
                  {ticketDesign.showFooter && (
                    <div className="text-center mt-4 text-xs text-gray-500">
                      {ticketDesign.footer.split('\n').map((line, i) => (
                        <div key={i} className={darkMode ? 'text-gray-400' : ''}>{line}</div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const ScannerModal = () => {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Escanear Producto</h2>
              <button
                onClick={() => setShowScanner(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className={`bg-gray-100 rounded-lg p-8 text-center mb-6 ${darkMode ? 'bg-gray-700' : ''}`}>
              <Camera className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <p className={`mb-4 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Coloque el cÃ³digo de barras frente a la cÃ¡mara</p>
              <button
                onClick={simulateScan}
                className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
              >
                Simular Escaneo
              </button>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowScanner(false)}
                className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                Escanear
              </button>
              <button
                onClick={() => setShowScanner(false)}
                className={`px-6 py-3 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const PaymentModal = () => {
    const [amount, setAmount] = useState(getTotalWithTax().toFixed(2));
    const [change, setChange] = useState(0);
    
    useEffect(() => {
      const total = getTotalWithTax();
      const received = parseFloat(amount) || 0;
      setChange(Math.max(0, received - total).toFixed(2));
    }, [amount]);

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Pago</h2>
              <button
                onClick={() => setShowPaymentModal(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-4">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Subtotal:</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getSubtotal().toFixed(2)}</span>
              </div>
              <div className="flex justify-between items-center mb-4">
                <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>IVA (16%):</span>
                <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getTax().toFixed(2)}</span>
              </div>
              <div className="flex justify-between items-center text-lg font-bold border-t pt-2">
                <span>Total:</span>
                <span className={darkMode ? 'text-white' : 'text-gray-900'}>${getTotalWithTax().toFixed(2)}</span>
              </div>
            </div>
            
            <div className="mb-6">
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>MÃ©todo de Pago</label>
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => setPaymentMethod('cash')}
                  className={`p-3 border rounded-lg flex items-center justify-center space-x-2 ${
                    paymentMethod === 'cash' 
                      ? 'border-indigo-500 bg-indigo-50 text-indigo-700' 
                      : `${darkMode ? 'border-gray-600 hover:bg-gray-700' : 'border-gray-300 hover:bg-gray-50'}`
                  } ${darkMode && paymentMethod === 'cash' ? 'bg-indigo-900 text-indigo-200' : ''}`}
                >
                  <DollarSign className="w-5 h-5" />
                  <span>Efectivo</span>
                </button>
                <button
                  onClick={() => setPaymentMethod('card')}
                  className={`p-3 border rounded-lg flex items-center justify-center space-x-2 ${
                    paymentMethod === 'card' 
                      ? 'border-indigo-500 bg-indigo-50 text-indigo-700' 
                      : `${darkMode ? 'border-gray-600 hover:bg-gray-700' : 'border-gray-300 hover:bg-gray-50'}`
                  } ${darkMode && paymentMethod === 'card' ? 'bg-indigo-900 text-indigo-200' : ''}`}
                >
                  <CreditCard className="w-5 h-5" />
                  <span>Tarjeta</span>
                </button>
              </div>
            </div>
            
            {paymentMethod === 'cash' && (
              <div className="mb-6">
                <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>Monto Recibido</label>
                <input
                  ref={paymentInputRef}
                  type="number"
                  step="0.01"
                  value={amount}
                  onChange={(e) => setAmount(e.target.value)}
                  className={`w-full px-3 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent text-lg`}
                  autoFocus
                />
                <div className={`mt-2 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  Cambio: <span className="font-medium">${change}</span>
                </div>
              </div>
            )}
            
            <div className="flex space-x-3">
              <button
                onClick={() => handlePayment(paymentMethod, parseFloat(amount) || 0)}
                className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                Completar Pago
              </button>
              <button
                onClick={() => setShowPaymentModal(false)}
                className={`px-6 py-3 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const CashRegisterModal = () => {
    const [operationType, setOperationType] = useState('in');
    const [operationAmount, setOperationAmount] = useState('');

    const handleOperation = () => {
      if (!operationAmount) return;
      handleCashRegisterOperation(operationType, parseFloat(operationAmount));
      setOperationAmount('');
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Caja Registradora</h2>
              <button
                onClick={() => setShowCashRegister(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className="mb-6">
              <div className={`bg-gray-50 rounded-lg p-4 mb-4 ${darkMode ? 'bg-gray-700' : ''}`}>
                <div className="flex justify-between items-center mb-2">
                  <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Monto de Apertura:</span>
                  <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${cashRegister.openingAmount.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center mb-2">
                  <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Ventas:</span>
                  <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${cashRegister.sales.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center mb-2">
                  <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Entradas:</span>
                  <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${cashRegister.cashIn.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center mb-2">
                  <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Salidas:</span>
                  <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${cashRegister.cashOut.toFixed(2)}</span>
                </div>
                <div className="flex justify-between items-center text-lg font-bold border-t pt-2">
                  <span>Total en Caja:</span>
                  <span className={darkMode ? 'text-white' : 'text-gray-900'}>${cashRegister.currentAmount.toFixed(2)}</span>
                </div>
              </div>
            </div>
            
            <div className="mb-6">
              <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>OperaciÃ³n</label>
              <div className="grid grid-cols-2 gap-3 mb-3">
                <button
                  onClick={() => setOperationType('in')}
                  className={`p-3 border rounded-lg flex items-center justify-center space-x-2 ${
                    operationType === 'in' 
                      ? 'border-green-500 bg-green-50 text-green-700' 
                      : `${darkMode ? 'border-gray-600 hover:bg-gray-700' : 'border-gray-300 hover:bg-gray-50'}`
                  } ${darkMode && operationType === 'in' ? 'bg-green-900 text-green-200' : ''}`}
                >
                  <Plus className="w-5 h-5" />
                  <span>Entrada</span>
                </button>
                <button
                  onClick={() => setOperationType('out')}
                  className={`p-3 border rounded-lg flex items-center justify-center space-x-2 ${
                    operationType === 'out' 
                      ? 'border-red-500 bg-red-50 text-red-700' 
                      : `${darkMode ? 'border-gray-600 hover:bg-gray-700' : 'border-gray-300 hover:bg-gray-50'}`
                  } ${darkMode && operationType === 'out' ? 'bg-red-900 text-red-200' : ''}`}
                >
                  <Minus className="w-5 h-5" />
                  <span>Salida</span>
                </button>
              </div>
              
              <input
                type="number"
                step="0.01"
                value={operationAmount}
                onChange={(e) => setOperationAmount(e.target.value)}
                placeholder="Monto"
                className={`w-full px-3 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
              />
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={handleOperation}
                className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                Registrar
              </button>
              <button
                onClick={() => setShowCashRegister(false)}
                className={`px-6 py-3 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cerrar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const NoteModal = () => {
    const [items, setItems] = useState([
      { id: 1, name: 'Arroz 1kg', received: true, observations: '' },
      { id: 2, name: 'Frijoles 1kg', received: false, observations: 'Empaque daÃ±ado' },
      { id: 3, name: 'Aceite 1L', received: true, observations: '' },
      { id: 4, name: 'Cerveza Modelo', received: true, observations: '' },
      { id: 5, name: 'Cigarros Marlboro', received: true, observations: '' },
    ]);

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-2xl w-full max-h-screen overflow-y-auto ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Nota de Entrega - Bodega</h2>
              <button
                onClick={() => setShowNotes(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className="mb-6">
              <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} mb-4`}>RecepciÃ³n de Insumos</h3>
              <div className="space-y-4">
                {items.map(item => (
                  <div key={item.id} className={`border rounded-lg p-4 ${darkMode ? 'border-gray-700' : ''}`}>
                    <div className="flex items-center justify-between mb-3">
                      <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>{item.name}</span>
                      <label className={`flex items-center space-x-2 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                        <input
                          type="checkbox"
                          checked={item.received}
                          onChange={(e) => {
                            setItems(items.map(i => 
                              i.id === item.id 
                                ? { ...i, received: e.target.checked }
                                : i
                            ));
                          }}
                          className="rounded"
                        />
                        <span>Recibido</span>
                      </label>
                    </div>
                    <input
                      type="text"
                      placeholder="Observaciones..."
                      value={item.observations}
                      onChange={(e) => {
                        setItems(items.map(i => 
                          i.id === item.id 
                            ? { ...i, observations: e.target.value }
                            : i
                        ));
                      }}
                      className={`w-full px-3 py-2 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                    />
                  </div>
                ))}
              </div>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowNotes(false)}
                className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                Confirmar RecepciÃ³n
              </button>
              <button
                onClick={() => setShowNotes(false)}
                className={`px-6 py-3 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cancelar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const TicketModal = () => {
    const ticketId = `T${Date.now().toString().slice(-6)}`;
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className={`bg-white rounded-xl max-w-md w-full ${darkMode ? 'bg-gray-800' : ''}`}>
          <div className={`p-6 border-b ${darkMode ? 'border-gray-700' : ''}`}>
            <div className="flex items-center justify-between">
              <h2 className={`text-xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Ticket de Venta</h2>
              <button
                onClick={() => setShowTicket(false)}
                className={`p-2 ${darkMode ? 'hover:bg-gray-700 text-gray-300' : 'hover:bg-gray-100 text-gray-600'} rounded-full`}
              >
                <X className="w-5 h-5" />
              </button>
            </div>
          </div>
          
          <div className="p-6">
            <div className="text-center mb-6">
              {ticketDesign.showLogo && (
                <img src={ticketDesign.logo} alt="Logo" className="w-16 h-16 mx-auto mb-3" />
              )}
              {ticketDesign.showHeader && (
                <div className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} mb-2`}>
                  {ticketDesign.header.split('\n').map((line, i) => (
                    <div key={i}>{line}</div>
                  ))}
                </div>
              )}
            </div>
            
            <div className={`border-t border-b py-4 mb-4 ${darkMode ? 'border-gray-700' : ''}`}>
              <div className="flex justify-between text-sm mb-2">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Folio:</span>
                <span className={darkMode ? 'text-gray-300' : ''}>#{ticketId}</span>
              </div>
              <div className="flex justify-between text-sm mb-2">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Fecha:</span>
                <span className={darkMode ? 'text-gray-300' : ''}>{currentDate}</span>
              </div>
              <div className="flex justify-between text-sm mb-2">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Hora:</span>
                <span className={darkMode ? 'text-gray-300' : ''}>{currentTime}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Cajera:</span>
                <span className={darkMode ? 'text-gray-300' : ''}>{adminPosMode ? 'admin' : currentUser.name}</span>
              </div>
            </div>
            
            <div className="mb-4">
              {cart.map(item => (
                <div key={item.id} className="flex justify-between text-sm mb-1">
                  <span className={darkMode ? 'text-gray-300' : ''}>{item.name} x{item.quantity}</span>
                  <span className={darkMode ? 'text-gray-300' : ''}>${(item.price * item.quantity).toFixed(2)}</span>
                </div>
              ))}
            </div>
            
            <div className={`border-t pt-4 ${darkMode ? 'border-gray-700' : ''}`}>
              <div className="flex justify-between text-sm mb-1">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>Subtotal:</span>
                <span className={darkMode ? 'text-gray-300' : ''}>${getSubtotal().toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-sm mb-1">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>IVA (16%):</span>
                <span className={darkMode ? 'text-gray-300' : ''}>${getTax().toFixed(2)}</span>
              </div>
              <div className="flex justify-between text-lg font-bold mb-2 mt-2">
                <span className={darkMode ? 'text-white' : 'text-gray-900'}>Total:</span>
                <span className={darkMode ? 'text-white' : 'text-gray-900'}>${getTotalWithTax().toFixed(2)}</span>
              </div>
            </div>
            
            {ticketDesign.showFooter && (
              <div className="text-center text-xs text-gray-500 mt-4">
                {ticketDesign.footer.split('\n').map((line, i) => (
                  <div key={i} className={darkMode ? 'text-gray-400' : ''}>{line}</div>
                ))}
              </div>
            )}
            
            <div className="flex space-x-3 mt-6">
              <button className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium flex items-center justify-center space-x-2">
                <PrinterIcon className="w-4 h-4" />
                <span>Imprimir</span>
              </button>
              <button
                onClick={() => setShowTicket(false)}
                className={`px-6 py-3 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors`}
              >
                Cerrar
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const AdminPOSScreen = () => {
    const currentStore = stores.find(s => s.id === adminPosStore);
    const storeInventory = inventory[adminPosStore] || [];

    const toggleFullscreen = () => {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen().catch(err => {
          console.error(`Error attempting to enable fullscreen: ${err.message}`);
        });
        setIsFullscreen(true);
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
          setIsFullscreen(false);
        }
      }
    };

    const handleCheckout = () => {
      if (cart.length === 0) return;
      setShowPaymentModal(true);
    };

    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'} flex flex-col`}>
        {/* Header */}
        <header className={`bg-white shadow-sm border-b ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
          <div className="px-4 py-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-3">
                  <Store className="w-8 h-8 text-indigo-600" />
                  <div>
                    <h1 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{currentStore?.name} (Admin)</h1>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Administrador</p>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <button
                  onClick={toggleFullscreen}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Pantalla Completa"
                >
                  {isFullscreen ? (
                    <ChevronLeft className="w-5 h-5" />
                  ) : (
                    <ChevronRight className="w-5 h-5" />
                  )}
                </button>
                <button
                  onClick={() => setShowTicketDesigner(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="DiseÃ±ar Ticket"
                >
                  <Receipt className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowScanner(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Escanear Producto"
                >
                  <Scan className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowCashRegister(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Caja Registradora"
                >
                  <Calculator className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowNotes(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Notas de Entrega"
                >
                  <FileText className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowCashRegister(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Corte de Caja"
                >
                  <CheckCircle className="w-5 h-5" />
                </button>
                <button
                  onClick={handleLogout}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Cerrar SesiÃ³n"
                >
                  <LogOut className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </header>

        <div className="flex-1 flex flex-col lg:flex-row">
          {/* Products Section */}
          <div className="flex-1 p-4">
            <div className="mb-4">
              <div className="relative">
                <Search className={`absolute left-3 top-3 w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} />
                <input
                  type="text"
                  placeholder="Buscar productos..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={`w-full pl-10 pr-20 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                />
                <div className="absolute right-3 top-3 flex space-x-2">
                  <button
                    onClick={() => setShowScanner(true)}
                    className={`p-1 ${darkMode ? 'text-gray-400 hover:bg-gray-600' : 'text-gray-600 hover:bg-gray-100'} rounded`}
                  >
                    <Scan className="w-5 h-5" />
                  </button>
                  <button className={`p-1 ${darkMode ? 'text-gray-400 hover:bg-gray-600' : 'text-gray-600 hover:bg-gray-100'} rounded`}>
                    <Filter className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3">
              {filteredProducts.map(product => {
                const inventoryItem = storeInventory.find(item => item.productId === product.id);
                const stock = inventoryItem ? inventoryItem.stock : 0;
                
                return (
                  <div
                    key={product.id}
                    className={`bg-white rounded-xl shadow-sm border hover:shadow-md transition-shadow cursor-pointer ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}
                    onClick={() => addToCart(product)}
                  >
                    <div className="p-3">
                      <img
                        src={product.image}
                        alt={product.name}
                        className="w-full h-16 object-cover rounded-lg mb-2"
                      />
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} text-xs mb-1 truncate`}>{product.name}</h3>
                      <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-1`}>{product.category}</p>
                      <div className="flex items-center justify-between">
                        <span className="font-bold text-indigo-600 text-sm">${product.price.toFixed(2)}</span>
                        <span className={`text-xs px-1 py-0.5 rounded-full ${
                          stock > 10 ? 'bg-green-100 text-green-800' :
                          stock > 5 ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        } ${darkMode ? (
                          stock > 10 ? 'bg-green-900 text-green-200' :
                          stock > 5 ? 'bg-yellow-900 text-yellow-200' :
                          'bg-red-900 text-red-200'
                        ) : ''}`}>
                          {stock}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Cart Section */}
          <div className={`w-full lg:w-96 bg-white border-l shadow-sm flex flex-col ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
            <div className={`p-4 border-b ${darkMode ? 'border-gray-700' : ''}`}>
              <h2 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Carrito ({cart.length})</h2>
            </div>

            <div className="flex-1 p-4 overflow-y-auto">
              {cart.length === 0 ? (
                <div className={`text-center ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-8`}>
                  <ShoppingCart className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>Carrito vacÃ­o</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {cart.map(item => (
                    <div key={item.id} className={`flex items-center space-x-3 p-3 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                      <img
                        src={item.image}
                        alt={item.name}
                        className="w-10 h-10 rounded-lg object-cover"
                      />
                      <div className="flex-1 min-w-0">
                        <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} text-sm truncate`}>{item.name}</h3>
                        <p className="text-sm text-indigo-600 font-medium">${item.price.toFixed(2)}</p>
                      </div>
                      <div className="flex items-center space-x-1">
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity - 1)}
                          className={`p-1 rounded-full ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'}`}
                        >
                          <Minus className="w-3 h-3" />
                        </button>
                        <span className="w-6 text-center text-sm font-medium">{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity + 1)}
                          className={`p-1 rounded-full ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'}`}
                        >
                          <Plus className="w-3 h-3" />
                        </button>
                      </div>
                      <button
                        onClick={() => removeFromCart(item.id)}
                        className={`p-1 ${darkMode ? 'text-red-400 hover:bg-gray-700' : 'text-red-500 hover:bg-red-50'} rounded-full`}
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {cart.length > 0 && (
              <div className={`p-4 border-t ${darkMode ? 'border-gray-700' : ''}`}>
                <div className="space-y-2 mb-4">
                  <div className="flex justify-between text-sm">
                    <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Subtotal:</span>
                    <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getSubtotal().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>IVA (16%):</span>
                    <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getTax().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-lg font-bold border-t pt-2">
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>Total:</span>
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>${getTotalWithTax().toFixed(2)}</span>
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  <button 
                    onClick={() => setCart([])}
                    className={`flex-1 py-3 px-4 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors text-sm`}
                  >
                    Cancelar
                  </button>
                  <button 
                    onClick={handleCheckout}
                    className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium flex items-center justify-center space-x-2 text-sm"
                  >
                    <CreditCard className="w-4 h-4" />
                    <span>Cobrar</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Status Bar */}
        <div className={`bg-gray-800 text-white px-4 py-2 text-xs flex items-center justify-between ${darkMode ? 'bg-gray-900' : ''}`}>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-1">
              <Wifi className="w-4 h-4" />
              <span>Conectado</span>
            </div>
            <div className="flex items-center space-x-1">
              <Battery className="w-4 h-4" />
              <span>100%</span>
            </div>
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>{new Date().toLocaleTimeString()}</span>
            </div>
          </div>
          <div>
            <span>POS v1.0 - La Estrella</span>
          </div>
        </div>

        {/* Modals */}
        {showTicketDesigner && <TicketDesigner />}
        {showScanner && <ScannerModal />}
        {showPaymentModal && <PaymentModal />}
        {showCashRegister && <CashRegisterModal />}
        {showNotes && <NoteModal />}
        {showTicket && <TicketModal />}
      </div>
    );
  };

  const POSScreen = () => {
    if (adminPosMode) {
      return <AdminPOSScreen />;
    }

    const currentStore = stores.find(s => s.id === currentUser.store);
    const storeInventory = inventory[currentUser.store] || [];

    const toggleFullscreen = () => {
      if (!document.fullscreenElement) {
        document.documentElement.requestFullscreen().catch(err => {
          console.error(`Error attempting to enable fullscreen: ${err.message}`);
        });
        setIsFullscreen(true);
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen();
          setIsFullscreen(false);
        }
      }
    };

    const handleCheckout = () => {
      if (cart.length === 0) return;
      setShowPaymentModal(true);
    };

    return (
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'} flex flex-col`}>
        {/* Header */}
        <header className={`bg-white shadow-sm border-b ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
          <div className="px-4 py-3">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-3">
                  <Store className="w-8 h-8 text-indigo-600" />
                  <div>
                    <h1 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{currentStore?.name}</h1>
                    <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>Cajera: {currentUser.name}</p>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <button
                  onClick={toggleFullscreen}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Pantalla Completa"
                >
                  {isFullscreen ? (
                    <ChevronLeft className="w-5 h-5" />
                  ) : (
                    <ChevronRight className="w-5 h-5" />
                  )}
                </button>
                <button
                  onClick={() => setShowTicketDesigner(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="DiseÃ±ar Ticket"
                >
                  <Receipt className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowScanner(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Escanear Producto"
                >
                  <Scan className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowCashRegister(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Caja Registradora"
                >
                  <Calculator className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowNotes(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Notas de Entrega"
                >
                  <FileText className="w-5 h-5" />
                </button>
                <button
                  onClick={() => setShowCashRegister(true)}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Corte de Caja"
                >
                  <CheckCircle className="w-5 h-5" />
                </button>
                <button
                  onClick={handleLogout}
                  className={`p-2 ${darkMode ? 'text-gray-300 hover:bg-gray-700' : 'text-gray-600 hover:bg-gray-100'} rounded-full`}
                  title="Cerrar SesiÃ³n"
                >
                  <LogOut className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </header>

        <div className="flex-1 flex flex-col lg:flex-row">
          {/* Products Section */}
          <div className="flex-1 p-4">
            <div className="mb-4">
              <div className="relative">
                <Search className={`absolute left-3 top-3 w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-400'}`} />
                <input
                  type="text"
                  placeholder="Buscar productos..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className={`w-full pl-10 pr-20 py-3 border ${darkMode ? 'bg-gray-700 border-gray-600 text-white' : 'border-gray-300'} rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent`}
                />
                <div className="absolute right-3 top-3 flex space-x-2">
                  <button
                    onClick={() => setShowScanner(true)}
                    className={`p-1 ${darkMode ? 'text-gray-400 hover:bg-gray-600' : 'text-gray-600 hover:bg-gray-100'} rounded`}
                  >
                    <Scan className="w-5 h-5" />
                  </button>
                  <button className={`p-1 ${darkMode ? 'text-gray-400 hover:bg-gray-600' : 'text-gray-600 hover:bg-gray-100'} rounded`}>
                    <Filter className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-3">
              {filteredProducts.map(product => {
                const inventoryItem = storeInventory.find(item => item.productId === product.id);
                const stock = inventoryItem ? inventoryItem.stock : 0;
                
                return (
                  <div
                    key={product.id}
                    className={`bg-white rounded-xl shadow-sm border hover:shadow-md transition-shadow cursor-pointer ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}
                    onClick={() => addToCart(product)}
                  >
                    <div className="p-3">
                      <img
                        src={product.image}
                        alt={product.name}
                        className="w-full h-16 object-cover rounded-lg mb-2"
                      />
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} text-xs mb-1 truncate`}>{product.name}</h3>
                      <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mb-1`}>{product.category}</p>
                      <div className="flex items-center justify-between">
                        <span className="font-bold text-indigo-600 text-sm">${product.price.toFixed(2)}</span>
                        <span className={`text-xs px-1 py-0.5 rounded-full ${
                          stock > 10 ? 'bg-green-100 text-green-800' :
                          stock > 5 ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        } ${darkMode ? (
                          stock > 10 ? 'bg-green-900 text-green-200' :
                          stock > 5 ? 'bg-yellow-900 text-yellow-200' :
                          'bg-red-900 text-red-200'
                        ) : ''}`}>
                          {stock}
                        </span>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          {/* Cart Section */}
          <div className={`w-full lg:w-96 bg-white border-l shadow-sm flex flex-col ${darkMode ? 'bg-gray-800 border-gray-700' : ''}`}>
            <div className={`p-4 border-b ${darkMode ? 'border-gray-700' : ''}`}>
              <h2 className={`text-lg font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Carrito ({cart.length})</h2>
            </div>

            <div className="flex-1 p-4 overflow-y-auto">
              {cart.length === 0 ? (
                <div className={`text-center ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-8`}>
                  <ShoppingCart className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>Carrito vacÃ­o</p>
                </div>
              ) : (
                <div className="space-y-3">
                  {cart.map(item => (
                    <div key={item.id} className={`flex items-center space-x-3 p-3 border rounded-lg ${darkMode ? 'border-gray-700' : ''}`}>
                      <img
                        src={item.image}
                        alt={item.name}
                        className="w-10 h-10 rounded-lg object-cover"
                      />
                      <div className="flex-1 min-w-0">
                        <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} text-sm truncate`}>{item.name}</h3>
                        <p className="text-sm text-indigo-600 font-medium">${item.price.toFixed(2)}</p>
                      </div>
                      <div className="flex items-center space-x-1">
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity - 1)}
                          className={`p-1 rounded-full ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'}`}
                        >
                          <Minus className="w-3 h-3" />
                        </button>
                        <span className="w-6 text-center text-sm font-medium">{item.quantity}</span>
                        <button
                          onClick={() => updateQuantity(item.id, item.quantity + 1)}
                          className={`p-1 rounded-full ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-100 hover:bg-gray-200'}`}
                        >
                          <Plus className="w-3 h-3" />
                        </button>
                      </div>
                      <button
                        onClick={() => removeFromCart(item.id)}
                        className={`p-1 ${darkMode ? 'text-red-400 hover:bg-gray-700' : 'text-red-500 hover:bg-red-50'} rounded-full`}
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {cart.length > 0 && (
              <div className={`p-4 border-t ${darkMode ? 'border-gray-700' : ''}`}>
                <div className="space-y-2 mb-4">
                  <div className="flex justify-between text-sm">
                    <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>Subtotal:</span>
                    <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getSubtotal().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className={darkMode ? 'text-gray-300' : 'text-gray-600'}>IVA (16%):</span>
                    <span className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>${getTax().toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-lg font-bold border-t pt-2">
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>Total:</span>
                    <span className={darkMode ? 'text-white' : 'text-gray-900'}>${getTotalWithTax().toFixed(2)}</span>
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  <button 
                    onClick={() => setCart([])}
                    className={`flex-1 py-3 px-4 border ${darkMode ? 'border-gray-600 text-gray-300 hover:bg-gray-700' : 'border-gray-300 text-gray-700 hover:bg-gray-50'} rounded-lg transition-colors text-sm`}
                  >
                    Cancelar
                  </button>
                  <button 
                    onClick={handleCheckout}
                    className="flex-1 bg-indigo-600 text-white py-3 px-4 rounded-lg hover:bg-indigo-700 transition-colors font-medium flex items-center justify-center space-x-2 text-sm"
                  >
                    <CreditCard className="w-4 h-4" />
                    <span>Cobrar</span>
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        {/* Status Bar */}
        <div className={`bg-gray-800 text-white px-4 py-2 text-xs flex items-center justify-between ${darkMode ? 'bg-gray-900' : ''}`}>
          <div className="flex items-center space-x-4">
            <div className="flex items-center space-x-1">
              <Wifi className="w-4 h-4" />
              <span>Conectado</span>
            </div>
            <div className="flex items-center space-x-1">
              <Battery className="w-4 h-4" />
              <span>100%</span>
            </div>
            <div className="flex items-center space-x-1">
              <Clock className="w-4 h-4" />
              <span>{new Date().toLocaleTimeString()}</span>
            </div>
          </div>
          <div>
            <span>POS v1.0 - La Estrella</span>
          </div>
        </div>

        {/* Modals */}
        {showTicketDesigner && <TicketDesigner />}
        {showScanner && <ScannerModal />}
        {showPaymentModal && <PaymentModal />}
        {showCashRegister && <CashRegisterModal />}
        {showNotes && <NoteModal />}
        {showTicket && <TicketModal />}
      </div>
    );
  };

  // Renderizado condicional
  if (currentView === 'login') {
    return <LoginScreen />;
  }

  if (currentView === 'admin-dashboard') {
    return <AdminDashboard />;
  }

  if (currentView === 'pos') {
    return <POSScreen />;
  }

  return <LoginScreen />;
};

export default App;